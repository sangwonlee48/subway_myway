#목표 1: 지하철 데이터를 전처리하여 히트맵을 완성한다. 
#목표 2: 지하철 데이터와 거리 상권 분석을 연동하여, 유동인구와 상권의 상관관계를 구한다.
# 목표 3: 구한 상관관계를 보기 좋게 시각화 한다.

# 주요 라이브러리 가져오기



import FinanceDataReader as fdr
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import koreanize_matplotlib
from glob import glob
import folium
# 그래프에 retina display 적용
%config InlineBackend.figure_format = 'retina'
# 노트북 안에서 그래프를 디스플레이 하겠다는 설정입니다.
%matplotlib inline

# 캐글에서 파일 가져오기

# 파일을 글로브로 일단 받아옴. 각자 컴퓨터 경로에 맞게 설정
files = glob("data/seoul-metro-20*.csv")
file_paths = sorted(files, reverse= True)
file_paths

# 역 정보도 동일한 방식으로 가져옴
infos = glob("data/seoul-metro-station-info*.csv")
info_paths = sorted(infos, reverse= True)
info_paths

# 데이터 모양 확인하기

# df_sub라는 변수에 담아 데이터를 저장. 데이터의 형태 확인. 194만 개의 데이터가 있음
df_sub = pd.read_csv(file_paths[0])
df_sub.shape

# 역 정보도 동일하게 확인. 컬럼이 다양하니 컬럼 확인
df_info = pd.read_csv(info_paths[0])
df_info.columns

# 역의 해외명 표기와 전화번호는 과감히 삭제
# 위도로 경도, 역이름 등 키값으로 매핑될 값만 남기고 확인
df_info['station_code'] =df_info['station.code']
cols = ['station_code', 'line.num', 'line.name',
        'line.name_sub','line.station_seq', 'station.name_full', 
        'station.name','geo.latitude', 'geo.longitude',
        'geo.sigungu_code', 'geo.sigungu_name']
df_info = df_info[cols]
df_info.head(2)

#df_sub는 대략 이런 모양을 띄고 있음
df_sub.describe()

#df_sub는 station code(역) 별로 사람 인입 수, 아웃 수가 측정이 되어 나옴
df_sub.columns

# 결측치는 존재하지 않음
df_sub.isnull().sum()

df_sub.dtypes



# RAW DATA와 역 정보 매핑하기

# #RAW 데이터의 인덱스값을 역이름으로 변경하기
# df_sub.set_index("station_code", inplace =True)

# # 작성한 역정보랑 RAW DATA 연결하기

# df_RAW = pd.concat(df_sub, axis=1)
# df_RAW.columns = df_info["station.code"]

# result3_in = pd.concat([df_sub,df_info],axis=1, join='inner')   #열방향(axis=1), 교집합(inner)


# # AXIS 기준으로 병합이 안되어 컬럼을 다시만들어서 merge 시도

# station_code라는 키값으로 한가지 데이터 프레임으로 합침
mrge_sub = pd.merge(df_sub, df_info)
mrge_sub

from folium.plugins import MarkerCluster


m = folium.Map(
    location=[37.559819, 126.963895],
    zoom_start=15
)

coords = mrge_sub[['geo.latitude', 'geo.longitude']]


marker_cluster = MarkerCluster().add_to(m)

for lat, long in zip(coords['geo.latitude'], coords['geo.longitude']):
    folium.Marker([lat, long], icon = folium.Icon(color="green")).add_to(marker_cluster)
m

